What is programming ?

Real life entities implemented in programming.

reausible entities created.

Programming paradigm.

easy without objects we can also do programming but they easily did out task. rather than functions.




-------------------------------------------------------------------------------------------------------------------
1.

  


-------------------------------------------------------------------------------------------------------------------
2.

 /*
        Abstraction: Selective Ignorance
        Means :- Whatever things u want just select it whatever not want just removed or ignoring it.
        Focusing only what is important or ignorning or removing what is not important is the concept of Abstraction.

        Real life ex :- Person as student , Person as patient , Person as employee.

        Abstraction means displaying only essential information and hiding the details. Data abstraction refers to providing only essential information about the data to the outside world, hiding the background details or implementation. 


        Encapsulation: Binding and Bundling the data and functions.
        Binding and Bunding the state and Behaviour into one unit that unit is (class)
        that mechanism is called as Encapsulation.
        or The process of wrapping properties and functions within a single unit is known as encapsulation.

        Real life ex:- whenever any person don't ask about your age , they can't exactly told your age.

        Example: Let’s understand encapsulation with an example.
        // Encapsulation example
        class person {
            constructor(name, id) {
                this.name = name;
                this.id = id;
            }
            add_Address(add) {
                this.add = add;
            }
            getDetails() {
                console.log(`Name is ${this.name},
                Address is: ${this.add}`);
            }
        }

        let person1 = new person('tarun', 23);
        person1.add_Address('Delhi');
        person1.getDetails();

        Output: In this example, we simply create a person Object using the constructor, Initialize its properties and use its functions. We are not bothered by the implementation details. We are working with an Object’s interface without considering the implementation details. 

        Output : name is tarun , Address is Delhi

         Most of the OOP languages provide access modifiers to restrict the scope of a variable, but there are no such access modifiers in JavaScript, there are certain ways by which we can restrict the scope of variables within the Class/Object.

         // Abstraction example
        function person(fname, lname) 
        {
            let firstname = fname;
            let lastname = lname;

            let getDetails_noaccess = function () 
            {
                return (`First name is: ${firstname} Last 
                    name is: ${lastname}`);
            }

            this.getDetails_access = function () 
            {
                return (`First name is: ${firstname}, Last 
                    name is: ${lastname}`);
            }
        }
        let person1 = new person('Tarun', 'Rathore');
        console.log(person1.firstname);
        console.log(person1.getDetails_noaccess);
        console.log(person1.getDetails_access());

        Output: In this example, we try to access some property(person1.firstname) and functions(person1.getDetails_noaccess) but it returns undefined while there is a method that we can access from the person object(person1.getDetails_access()). By changing the way we define a function we can restrict its scope.

        Output : First name is : Tarun and Last name is : rathore


        */

-------------------------------------------------------------------------------------------------------------------
3. 
      /*
        Inheritance: Inherit and acquire the properties of super class into base class or child class.
        Creating specialized entity from existing genralized entity.
        getting few thing and add few thing is the concept of inheritance
        It is a concept in which some properties and methods of an Object are being used by another Object. Unlike most of the OOP languages where classes inherit classes, JavaScript Objects inherit Objects i.e. certain features (property and methods) of one object can be reused by other Objects.

        Real life example : Person class is reused to create class Student.
        Person class is also reused to create class Employee.
         
       Example: Let’s understand inheritance and polymorphism with an example.

       // Inheritance example
        class person 
        {
            constructor(name) 
            {
                this.name = name;
            }
            // method to return the string
            toString() 
            {
                return (`Name of person: ${this.name}`);
            }
        }

        class student extends person 
        {
            constructor(name, id) 
            {
                // super keyword for calling the above 
                // class constructor
                super(name);
                this.id = id;
            }
            toString() 
            {
                return (`${super.toString()},
                Student ID: ${this.id}`);
            }
        }
        
        let student1 = new student('tarun', 23);
        document.write(student1.toString());

        Output: In this example, we define a Person Object with certain properties and methods and then we inherit the Person Object in the Student Object  or Employee Object and use all the properties and methods of the person Object as well as define certain properties and methods for the Student Object and Employee Object.

        Output :
        Name of Person : tarun , Student ID : 23
        
        Note: The Person and Student objects both have the same method (i.e toString()), this is called Method Overriding. Method Overriding allows a method in a child class to have the same name(polymorphism) and method signature as that of a parent class. 
        
        In the above code, the super keyword is used to refer to the immediate parent class’s instance variable. 
        and invoking super methods as well.
        */

-------------------------------------------------------------------------------------------------------------------
4.

        /*
        Polymorphism: 
        Polymorphism is one of the core concepts of object-oriented programming languages. Polymorphism means the same function with different signatures is called many times. In 
 
        Real life ex :- for example, a boy at the same time may be a student, a class monitor, etc. So a boy can perform different operations at the same time. Polymorphism can be achieved by method overriding and method overloading
  
        one more ex :- At traffic signal when red light all vehicles are stop , but their stoping vehcile mechanism are different.

        one more ex :- At cricket match when refry says start , all players did different things , baller take run , feilder get attentioned on ball , or batsman take stance on pitch .



        Example: Let’s understand polymorphism with an example.

       // Polymorphism example
        class person 
        {
            constructor(name) 
            {
                this.name = name;
            }
            // method to return the string
            toString() 
            {
                return (`Name of person: ${this.name}`);
            }
        }

        class student extends person 
        {
            constructor(name, id) 
            {
                // super keyword for calling the above 
                // class constructor
                super(name);
                this.id = id;
            }
            toString() 
            {
                return (`${super.toString()},
                Student ID: ${this.id}`);
            }
        }
        
        class employee extends person 
        {
            constructor(name, id) 
            {
                // super keyword for calling the above 
                // class constructor
                super(name);
                this.empno = empno;
            }
            toString() 
            {
                return (`${super.toString()},
                Employee No: ${this.empno}`);
            }
        }

        let student1 = new student('tarun', 23);
        document.write(student1.toString());

        
        let employee1 = new employee('tarun', 23);
        document.write(employee1.toString());

        Output: In this example, we define a Person Object with certain properties and methods and then we inherit the Person Object in the Student Object  or Employee Object and use all the properties and methods of the person Object as well as define certain properties and methods for the Student Object and Employee Object.

        Output :
        Name of Person : tarun , Student ID : 23
        Name of Person : tarun , Employee No : 23
        
        Note: The Person and Student objects both have the same method (i.e toString()), this is called Method Overriding. Method Overriding allows a method in a child class to have the same name(polymorphism) and method signature as that of a parent class. 
        
        In the above code, the super keyword is used to refer to the immediate parent class’s instance variable. 
        and invoking super methods as well.


            */